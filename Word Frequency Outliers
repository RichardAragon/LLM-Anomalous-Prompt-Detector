import nltk
from IPython.display import HTML

def detect_word_frequency_outliers(text, dynamic_threshold):
    """
    Identifies word frequency outliers within a text using a dynamic threshold.

    Args:
        text: The input text to be analyzed for outliers (assumed to be a string).
        dynamic_threshold: A function that calculates the threshold based on the data.

    Returns:
        A list of outlier words.
    """

    # Tokenize the text into words
    words = nltk.word_tokenize(text)

    # Calculate frequencies of all words
    freq_dist = nltk.FreqDist(words)

    # Calculate the dynamic threshold using the provided function
    threshold = dynamic_threshold(list(freq_dist.values()))

    # Identify outliers based on the threshold
    outliers = [word for word, freq in freq_dist.items() if freq > threshold]  # Modified for high-frequency outliers

    return outliers

def simple_mean_threshold(values):
    """A basic threshold function that uses the mean as the threshold."""
    return np.mean(values)

text = "This is a sample text with some words appearing more often than others. The word 'is' is repeated multiple times, making it an outlier."
outlier_words = detect_word_frequency_outliers(text, simple_mean_threshold)

print("Detected outlier words:")
for outlier in outlier_words:
    print(f"- {outlier}")

# Highlighting within the text (optional):
highlighted_text = text
for outlier in outlier_words:
    highlighted_text = highlighted_text.replace(outlier, f"<mark>{outlier}</mark>")

print(HTML(highlighted_text))
